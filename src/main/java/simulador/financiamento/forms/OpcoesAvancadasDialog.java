package simulador.financiamento.forms;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import simulador.financiamento.dominio.OpcoesAvancadas;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;

import static java.util.Objects.isNull;
import static simulador.financiamento.utils.Constants.*;

public class OpcoesAvancadasDialog extends JDialog {
    private JPanel contentPane;
    private JButton buttonOK;
    private JButton buttonCancel;
    private JPanel dialogPanel;
    private JTextField inflacao;
    private JLabel inflacaoLabel;
    private JPanel inflacaoPanel;
    private JPanel valorizacaoPanel;
    private JTextField valorizacao;
    private JLabel valorizacaoLabel;
    private JPanel buttonsPanel;

    private OpcoesAvancadas opcoesAvancadas;

    public OpcoesAvancadasDialog(OpcoesAvancadas opcoesAvancadas) {
        this.opcoesAvancadas = opcoesAvancadas;

        setContentPane(contentPane);
        setModal(true);
        getRootPane().setDefaultButton(buttonOK);

        preencheCamposDefault();

        buttonOK.addActionListener(e -> onOK());
        buttonCancel.addActionListener(e -> onCancel());

        // call onCancel() when cross is clicked
        setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e) {
                onCancel();
            }
        });

        // call onCancel() on ESCAPE
        contentPane.registerKeyboardAction(e -> onCancel(),
                KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0),
                JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
    }

    public OpcoesAvancadas showDialog() {
        setVisible(true);
        return opcoesAvancadas;
    }

    private void onOK() {

        if (inflacao.getText().isBlank()) {
            inflacao.setText("0");
        }

        if (valorizacao.getText().isBlank()) {
            valorizacao.setText("0");
        }

        if (!pattern.matcher(inflacao.getText()).matches()) {
            JOptionPane.showMessageDialog(null,
                    "O campo \"Inflação Anual\" não respeita o formato \"123.456,78\"." +
                            "\nUse \",\" como separador decimal e \".\" como separador de milhar (opcional).",
                    "Erro",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (!pattern.matcher(valorizacao.getText()).matches()) {
            JOptionPane.showMessageDialog(null,
                    "O campo \"Valorização Anual\" não respeita o formato \"123.456,78\"." +
                            "\nUse \",\" como separador decimal e \".\" como separador de milhar (opcional).",
                    "Erro",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (Double.parseDouble(sanitize(inflacao.getText())) < 0) {
            JOptionPane.showMessageDialog(null,
                    "A expectativa de inflação não pode ser negativa. Valor atual: " + inflacao.getText(),
                    "Erro",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (Double.parseDouble(sanitize(valorizacao.getText())) < 0) {
            JOptionPane.showMessageDialog(null,
                    "A expectativa de valorização não pode ser negativa. Valor atual: " + valorizacao.getText(),
                    "Erro",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }

        opcoesAvancadas = new OpcoesAvancadas(
                Double.valueOf(sanitize(inflacao.getText())),
                Double.valueOf(sanitize(valorizacao.getText()))
        );

        setVisible(false);
        dispose();
    }

    private void onCancel() {
        setVisible(false);
        dispose();
    }

    private void preencheCamposDefault() {
        if (isNull(opcoesAvancadas)) {
            inflacao.setText("0");
            valorizacao.setText("0");
        } else {
            inflacao.setText(decimalFormatter.format(opcoesAvancadas.getInflacao()));
            valorizacao.setText(decimalFormatter.format(opcoesAvancadas.getValorizacao()));
        }
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        contentPane = new JPanel();
        contentPane.setLayout(new GridLayoutManager(2, 1, new Insets(10, 10, 10, 10), -1, -1));
        buttonsPanel = new JPanel();
        buttonsPanel.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        contentPane.add(buttonsPanel, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, 1, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        buttonsPanel.add(spacer1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1, true, false));
        buttonsPanel.add(panel1, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        buttonOK = new JButton();
        buttonOK.setText("OK");
        panel1.add(buttonOK, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        buttonCancel = new JButton();
        buttonCancel.setText("Cancelar");
        panel1.add(buttonCancel, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        dialogPanel = new JPanel();
        dialogPanel.setLayout(new GridLayoutManager(3, 1, new Insets(0, 0, 0, 0), -1, -1));
        contentPane.add(dialogPanel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        inflacaoPanel = new JPanel();
        inflacaoPanel.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        dialogPanel.add(inflacaoPanel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        inflacaoLabel = new JLabel();
        inflacaoLabel.setText("Inflação Anual (%)");
        inflacaoLabel.setToolTipText("Expectativa de inflação anual. Considerar uma média dos últimos anos.");
        inflacaoPanel.add(inflacaoLabel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, new Dimension(150, -1), new Dimension(100, -1), null, 0, false));
        inflacao = new JTextField();
        inflacaoPanel.add(inflacao, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(200, -1), null, 0, false));
        final Spacer spacer2 = new Spacer();
        dialogPanel.add(spacer2, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        valorizacaoPanel = new JPanel();
        valorizacaoPanel.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        dialogPanel.add(valorizacaoPanel, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        valorizacaoLabel = new JLabel();
        valorizacaoLabel.setText("Valorização Anual (%)");
        valorizacaoLabel.setToolTipText("Expectativa de valorização anual. Considerar uma média dos últimos anos para a região do imóvel.");
        valorizacaoPanel.add(valorizacaoLabel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, new Dimension(150, -1), new Dimension(100, -1), null, 0, false));
        valorizacao = new JTextField();
        valorizacaoPanel.add(valorizacao, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(200, -1), null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPane;
    }

}
